{
    "docs": [
        {
            "location": "/", 
            "text": "Nginx\n\n\nThe aim of this component is to build web forwards/reverse proxy to LXD/LXC \ncontainers on the host (or external upstreams), not as a \nserver{}\n block configurator.\n\n\nThe component uses nginx as a reverse proxy, it relies on php7-fpm being \ninstalled and will overwrite \n/etc/nginx/nginx.conf\n! So if you already have\nnginx installed then dont use this component as it will most likely break your stuff.\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/nginx\n\n\n\n\n\nThen navigate to \n./vendor/plinker/nginx/scripts\n and run \nbash install.sh\n.\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n,\n\n        \n// database connection\n\n        \ndatabase\n \n=\n \n[\n\n            \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n            \nhost\n     \n=\n \n,\n\n            \nname\n     \n=\n \n,\n\n            \nusername\n \n=\n \n,\n\n            \npassword\n \n=\n \n,\n\n            \nfreeze\n   \n=\n \nfalse\n,\n\n            \ndebug\n    \n=\n \nfalse\n,\n\n        \n]\n\n    \n]\n\n\n);\n\n\n\n// or using global function\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n,\n \n[\n\n    \n// database connection\n\n    \ndatabase\n \n=\n \n[\n\n        \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n        \nhost\n     \n=\n \n,\n\n        \nname\n     \n=\n \n,\n\n        \nusername\n \n=\n \n,\n\n        \npassword\n \n=\n \n,\n\n        \nfreeze\n   \n=\n \nfalse\n,\n\n        \ndebug\n    \n=\n \nfalse\n,\n\n    \n]\n\n\n]);\n\n\n\n\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method.\n\n\nSetup\n\n\nApplies build tasks to plinker/tasks queue.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\noptions\n\n\narray\n\n\nBuild options\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\nnginx-\nsetup([\n    \nbuild_sleep\n =\n 5,\n    \nreconcile_sleep\n =\n 5,\n]);\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nUpdate Package\n\n\nRuns composer update to update package.\n\n\nCall\n\n\n$client-\nnginx-\nupdate_package();\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nAdd\n\n\nAdd a web proxy rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndata\n\n\narray\n\n\nRule data\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\nnginx-\naddBlock([\n    \nlabel\n =\n \nMy website nginx route\n,\n    \nownDomain\n =\n [\n        \nexample.com\n,\n        \nwww.example.com\n\n    ],\n    \nownUpstream\n =\n [\n        [\nip\n =\n \n10.158.250.5\n, \nport\n =\n \n80\n]\n    ],\n    \nletsencrypt\n =\n 1,\n    \nenabled\n =\n 1\n]);\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n    [values] =\n Array\n        (\n            [id] =\n 1\n            [label] =\n My website nginx route\n            [name] =\n c094c6c1-0fa1-40f1-af66-60e173e8dbac\n            [ssl_type] =\n letsencrypt\n            [added] =\n 2018-05-13 17:25:51\n            [updated] =\n 2018-05-13 17:25:51\n            [has_change] =\n 1\n            [has_error] =\n 0\n            [delete] =\n 0\n            [enabled] =\n 1\n            [update_ip] =\n 0\n            [ip] =\n 10.158.250.5\n            [port] =\n 80\n            [ownDomain] =\n Array\n                (\n                    [0] =\n Array\n                        (\n                            [id] =\n 1\n                            [name] =\n example.com\n                            [route_id] =\n 1\n                        )\n\n                    [1] =\n Array\n                        (\n                            [id] =\n 2\n                            [name] =\n www.example.com\n                            [route_id] =\n 1\n                        )\n\n                )\n\n            [ownUpstream] =\n Array\n                (\n                    [0] =\n Array\n                        (\n                            [id] =\n 1\n                            [ip] =\n 10.158.250.5\n                            [port] =\n 80\n                            [route_id] =\n 1\n                        )\n\n                )\n\n        )\n\n)\n\n\n\n\n\nUpdate Block\n\n\nUpdate a web proxy rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\ndata\n\n\narray\n\n\nUpdated rule data\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nclient-\nnginx-\nupdate(\nname = ?\n, [\nb2f78de7-5994-4c21-9c55-76cefe327a67\n], [\n    \nlabel\n =\n $test_route_label,\n    \nownDomain\n =\n [\n        \nupdated-example.com\n,\n        \nwww.updated-example.com\n\n    ],\n    \nownUpstream\n =\n [\n        [\nip\n =\n \n10.158.250.5\n, \nport\n =\n \n80\n]\n    ],\n    \nletsencrypt\n =\n 0,\n    \nenabled\n =\n 1\n]);\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n    [values] =\n Array\n        (\n            [id] =\n 3\n            [label] =\n Example\n            [name] =\n b2f78de7-5994-4c21-9c55-76cefe327a67\n            [ssl_type] =\n \n            [added] =\n 2018-05-12 20:17:09\n            [updated] =\n 2018-05-13 17:28:50\n            [has_change] =\n 1\n            [has_error] =\n 1\n            [delete] =\n 0\n            [enabled] =\n 1\n            [update_ip] =\n 0\n            [ip] =\n 10.158.250.5\n            [port] =\n 80\n            [error] =\n {}\n            [ownDomain] =\n Array\n                (\n                    [0] =\n Array\n                        (\n                            [id] =\n 9\n                            [name] =\n updated-example.com\n                            [route_id] =\n 3\n                        )\n\n                    [1] =\n Array\n                        (\n                            [id] =\n 10\n                            [name] =\n www.updated-example.com\n                            [route_id] =\n 3\n                        )\n\n                )\n\n            [ownUpstream] =\n Array\n                (\n                    [0] =\n Array\n                        (\n                            [id] =\n 5\n                            [ip] =\n 10.158.250.5\n                            [port] =\n 80\n                            [route_id] =\n 3\n                        )\n\n                )\n\n        )\n\n)\n\n\n\n\n\nRemove\n\n\nRemove web proxy rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nruleById(1)   - $client-\nnginx-\nremove(\nid = ?\n, [1]);\nruleByName(1) - $client-\nnginx-\nremove(\nname = ?\n, [\nguidV4-value\n])\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n)\n\n\n\n\n\nReset\n\n\nRemove all web proxy rules.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npurge\n\n\nbool\n\n\nAlso remove tasks\n\n\nfalse\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\nnginx-\nreset();     // remove just rules\n$client-\nnginx-\nreset(true); // remove rules and tasks (purge)\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n)\n\n\n\n\n\nFetch\n\n\nFetch currently configured web proxy rules from database.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nall           - $client-\nnginx-\nfetch();\nruleById(1)   - $client-\nnginx-\nfetch(\nid = ?\n, [1]);\nruleByName(1) - $client-\nnginx-\nfetch(\nname = ?\n, [\nguidV4-value\n])\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [0] =\n Array\n        (\n            [id] =\n 1\n            [label] =\n Example\n            [name] =\n 9801e216-a663-4f21-a3f5-047be2b3b9c9\n            [ssl_type] =\n \n            [added] =\n 2018-05-12 19:52:58\n            [updated] =\n 2018-05-12 19:52:58\n            [has_change] =\n 0\n            [has_error] =\n 0\n            [delete] =\n 0\n            [enabled] =\n 1\n            [update_ip] =\n 0\n            [ip] =\n 10.158.250.5\n            [port] =\n 80\n            [error] =\n \n            [ownDomain] =\n Array\n                (\n                    [0] =\n Array\n                        (\n                            [id] =\n 1\n                            [name] =\n example.com\n                            [route_id] =\n 2\n                        )\n\n                    [1] =\n Array\n                        (\n                            [id] =\n 2\n                            [name] =\n www.example.com\n                            [route_id] =\n 2\n                        )\n\n                )\n\n            [ownUpstream] =\n Array\n                (\n                    [0] =\n Array\n                        (\n                            [id] =\n 1\n                            [ip] =\n 10.158.250.5\n                            [port] =\n 80\n                            [route_id] =\n 2\n                        )\n\n                )\n\n        )\n)\n\n\n\n\n\nCount\n\n\nFetch count of currently configured web proxy rules from database.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nall           - $client-\nnginx-\ncount();\nruleById(1)   - $client-\nnginx-\ncount(\nid = ?\n, [1]);\nruleByName(1) - $client-\nnginx-\ncount(\nname = ?\n, [\nguidV4-value\n])\n\n\n\n\n\nResponse\n\n\n1\n\n\n\n\n\nRebuild\n\n\nRebuild web proxy rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nruleById(1)   - $client-\nnginx-\nrebuild(\nid = ?\n, [1]);\nruleByName(1) - $client-\nnginx-\nrebuild(\nname = ?\n, [\nguidV4-value\n])\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n)\n\n\n\n\n\nStatus\n\n\nEnumarate and return status of nginx connections.\n\n\nCall\n\n\n$client-\nnginx-\nstatus();\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [active_connections] =\n 2\n    [accepts] =\n 579\n    [handled] =\n 579\n    [requests] =\n 579\n    [reading] =\n 0\n    [writing] =\n 2\n    [waiting] =\n 0\n)\n\n\n\n\n\nTesting\n\n\nThere are no tests setup for this component.\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee the \norganisations page\n for additional components.", 
            "title": "Nginx"
        }, 
        {
            "location": "/#nginx", 
            "text": "The aim of this component is to build web forwards/reverse proxy to LXD/LXC \ncontainers on the host (or external upstreams), not as a  server{}  block configurator.  The component uses nginx as a reverse proxy, it relies on php7-fpm being \ninstalled and will overwrite  /etc/nginx/nginx.conf ! So if you already have\nnginx installed then dont use this component as it will most likely break your stuff.", 
            "title": "Nginx"
        }, 
        {
            "location": "/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/nginx  Then navigate to  ./vendor/plinker/nginx/scripts  and run  bash install.sh .", 
            "title": "Install"
        }, 
        {
            "location": "/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password , \n         // database connection \n         database   =   [ \n             dsn        =   sqlite:./.plinker/database.db , \n             host       =   , \n             name       =   , \n             username   =   , \n             password   =   , \n             freeze     =   false , \n             debug      =   false , \n         ] \n     ]  );  // or using global function  $client   =   plinker_client ( http://example.com/server.php ,   a secret password ,   [ \n     // database connection \n     database   =   [ \n         dsn        =   sqlite:./.plinker/database.db , \n         host       =   , \n         name       =   , \n         username   =   , \n         password   =   , \n         freeze     =   false , \n         debug      =   false , \n     ]  ]);", 
            "title": "Client"
        }, 
        {
            "location": "/#methods", 
            "text": "Once setup, you call the class though its namespace to its method.", 
            "title": "Methods"
        }, 
        {
            "location": "/#setup", 
            "text": "Applies build tasks to plinker/tasks queue.     Parameter  Type  Description  Default      options  array  Build options      Call  $client- nginx- setup([\n     build_sleep  =  5,\n     reconcile_sleep  =  5,\n]);  Response", 
            "title": "Setup"
        }, 
        {
            "location": "/#update-package", 
            "text": "Runs composer update to update package.  Call  $client- nginx- update_package();  Response", 
            "title": "Update Package"
        }, 
        {
            "location": "/#add", 
            "text": "Add a web proxy rule.     Parameter  Type  Description  Default      data  array  Rule data      Call  $client- nginx- addBlock([\n     label  =   My website nginx route ,\n     ownDomain  =  [\n         example.com ,\n         www.example.com \n    ],\n     ownUpstream  =  [\n        [ ip  =   10.158.250.5 ,  port  =   80 ]\n    ],\n     letsencrypt  =  1,\n     enabled  =  1\n]);  Response  Array\n(\n    [status] =  success\n    [values] =  Array\n        (\n            [id] =  1\n            [label] =  My website nginx route\n            [name] =  c094c6c1-0fa1-40f1-af66-60e173e8dbac\n            [ssl_type] =  letsencrypt\n            [added] =  2018-05-13 17:25:51\n            [updated] =  2018-05-13 17:25:51\n            [has_change] =  1\n            [has_error] =  0\n            [delete] =  0\n            [enabled] =  1\n            [update_ip] =  0\n            [ip] =  10.158.250.5\n            [port] =  80\n            [ownDomain] =  Array\n                (\n                    [0] =  Array\n                        (\n                            [id] =  1\n                            [name] =  example.com\n                            [route_id] =  1\n                        )\n\n                    [1] =  Array\n                        (\n                            [id] =  2\n                            [name] =  www.example.com\n                            [route_id] =  1\n                        )\n\n                )\n\n            [ownUpstream] =  Array\n                (\n                    [0] =  Array\n                        (\n                            [id] =  1\n                            [ip] =  10.158.250.5\n                            [port] =  80\n                            [route_id] =  1\n                        )\n\n                )\n\n        )\n\n)", 
            "title": "Add"
        }, 
        {
            "location": "/#update-block", 
            "text": "Update a web proxy rule.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values     data  array  Updated rule data      Call  client- nginx- update( name = ? , [ b2f78de7-5994-4c21-9c55-76cefe327a67 ], [\n     label  =  $test_route_label,\n     ownDomain  =  [\n         updated-example.com ,\n         www.updated-example.com \n    ],\n     ownUpstream  =  [\n        [ ip  =   10.158.250.5 ,  port  =   80 ]\n    ],\n     letsencrypt  =  0,\n     enabled  =  1\n]);  Response  Array\n(\n    [status] =  success\n    [values] =  Array\n        (\n            [id] =  3\n            [label] =  Example\n            [name] =  b2f78de7-5994-4c21-9c55-76cefe327a67\n            [ssl_type] =  \n            [added] =  2018-05-12 20:17:09\n            [updated] =  2018-05-13 17:28:50\n            [has_change] =  1\n            [has_error] =  1\n            [delete] =  0\n            [enabled] =  1\n            [update_ip] =  0\n            [ip] =  10.158.250.5\n            [port] =  80\n            [error] =  {}\n            [ownDomain] =  Array\n                (\n                    [0] =  Array\n                        (\n                            [id] =  9\n                            [name] =  updated-example.com\n                            [route_id] =  3\n                        )\n\n                    [1] =  Array\n                        (\n                            [id] =  10\n                            [name] =  www.updated-example.com\n                            [route_id] =  3\n                        )\n\n                )\n\n            [ownUpstream] =  Array\n                (\n                    [0] =  Array\n                        (\n                            [id] =  5\n                            [ip] =  10.158.250.5\n                            [port] =  80\n                            [route_id] =  3\n                        )\n\n                )\n\n        )\n\n)", 
            "title": "Update Block"
        }, 
        {
            "location": "/#remove", 
            "text": "Remove web proxy rule.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values      Call  ruleById(1)   - $client- nginx- remove( id = ? , [1]);\nruleByName(1) - $client- nginx- remove( name = ? , [ guidV4-value ])  Response  Array\n(\n    [status] =  success\n)", 
            "title": "Remove"
        }, 
        {
            "location": "/#reset", 
            "text": "Remove all web proxy rules.     Parameter  Type  Description  Default      purge  bool  Also remove tasks  false     Call  $client- nginx- reset();     // remove just rules\n$client- nginx- reset(true); // remove rules and tasks (purge)  Response  Array\n(\n    [status] =  success\n)", 
            "title": "Reset"
        }, 
        {
            "location": "/#fetch", 
            "text": "Fetch currently configured web proxy rules from database.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values      Call  all           - $client- nginx- fetch();\nruleById(1)   - $client- nginx- fetch( id = ? , [1]);\nruleByName(1) - $client- nginx- fetch( name = ? , [ guidV4-value ])  Response  Array\n(\n    [0] =  Array\n        (\n            [id] =  1\n            [label] =  Example\n            [name] =  9801e216-a663-4f21-a3f5-047be2b3b9c9\n            [ssl_type] =  \n            [added] =  2018-05-12 19:52:58\n            [updated] =  2018-05-12 19:52:58\n            [has_change] =  0\n            [has_error] =  0\n            [delete] =  0\n            [enabled] =  1\n            [update_ip] =  0\n            [ip] =  10.158.250.5\n            [port] =  80\n            [error] =  \n            [ownDomain] =  Array\n                (\n                    [0] =  Array\n                        (\n                            [id] =  1\n                            [name] =  example.com\n                            [route_id] =  2\n                        )\n\n                    [1] =  Array\n                        (\n                            [id] =  2\n                            [name] =  www.example.com\n                            [route_id] =  2\n                        )\n\n                )\n\n            [ownUpstream] =  Array\n                (\n                    [0] =  Array\n                        (\n                            [id] =  1\n                            [ip] =  10.158.250.5\n                            [port] =  80\n                            [route_id] =  2\n                        )\n\n                )\n\n        )\n)", 
            "title": "Fetch"
        }, 
        {
            "location": "/#count", 
            "text": "Fetch count of currently configured web proxy rules from database.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values      Call  all           - $client- nginx- count();\nruleById(1)   - $client- nginx- count( id = ? , [1]);\nruleByName(1) - $client- nginx- count( name = ? , [ guidV4-value ])  Response  1", 
            "title": "Count"
        }, 
        {
            "location": "/#rebuild", 
            "text": "Rebuild web proxy rule.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values      Call  ruleById(1)   - $client- nginx- rebuild( id = ? , [1]);\nruleByName(1) - $client- nginx- rebuild( name = ? , [ guidV4-value ])  Response  Array\n(\n    [status] =  success\n)", 
            "title": "Rebuild"
        }, 
        {
            "location": "/#status", 
            "text": "Enumarate and return status of nginx connections.  Call  $client- nginx- status();  Response  Array\n(\n    [active_connections] =  2\n    [accepts] =  579\n    [handled] =  579\n    [requests] =  579\n    [reading] =  0\n    [writing] =  2\n    [waiting] =  0\n)", 
            "title": "Status"
        }, 
        {
            "location": "/#testing", 
            "text": "There are no tests setup for this component.", 
            "title": "Testing"
        }, 
        {
            "location": "/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See the  organisations page  for additional components.", 
            "title": "License"
        }
    ]
}