{
    "docs": [
        {
            "location": "/", 
            "text": "PlinkerRPC PHP client/server makes it really easy to link and execute PHP \ncomponent classes on remote systems, while maintaining the feel of a local \nmethod call.\n\n\nThe aim of this component is to build web forwards/reverse proxy to LXD/LXC \ncontainers on the host (or external upstreams), not as a \nserver{}\n block configurator.\n\n\nThe component uses nginx as a reverse proxy, it relies on php7-fpm being \ninstalled and will overwrite \n/etc/nginx/nginx.conf\n! So if you already have\nnginx installed then dont use this component as it will most likely break your stuff.\n\n\n::Installing::\n\n\nBring in the project with composer:\n\n\n{\n    \nrequire\n: {\n        \nplinker/nginx\n: \n=v0.1\n\n    }\n}\n\n\n\n\n\nThen navigate to \n./vendor/plinker/nginx/scripts\n and run \nbash install.sh\n\n\nThe webroot for plinker will be \n/var/www/html\n so plinker should be in there.\nThe difference being that nginx will listen on port 88 for plinker calls, \nand 80, 443 for the reverse proxy.\n\n\n::Client::\n\n\n/**\n\n\n * Plinker Config\n\n\n */\n\n\n$\nconfig\n \n=\n \n[\n\n\n    \n//\n \nplinker\n \nconnection\n\n\n    \nplinker\n \n=\n \n[\n\n\n        \nendpoint\n \n=\n \nhttp://127.0.0.1:88\n,\n\n\n        \npublic_key\n  \n=\n \nmakeSomethingUp\n,\n\n\n        \nprivate_key\n \n=\n \nagainMakeSomethingUp\n\n\n    \n]\n,\n\n\n\n    \n//\n \ndatabase\n \nconnection\n\n\n    \ndatabase\n \n=\n \n[\n\n\n        \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n\n        \nhost\n     \n=\n \n,\n\n\n        \nname\n     \n=\n \n,\n\n\n        \nusername\n \n=\n \n,\n\n\n        \npassword\n \n=\n \n,\n\n\n        \nfreeze\n   \n=\n \nfalse\n,\n\n\n        \ndebug\n    \n=\n \nfalse\n,\n\n\n    \n]\n\n\n];\n\n\n\n//\n \ninit\n \nplinker\n \nendpoint\n \nclient\n\n\n$\nnginx\n \n=\n \nnew\n \n\\\nPlinker\n\\\nCore\n\\\nClient\n(\n\n\n    \n//\n \nwhere\n \nis\n \nthe\n \nplinker\n \nserver\n\n\n    \n$\nconfig\n[\nplinker\n][\nendpoint\n]\n,\n\n\n\n    \n//\n \ncomponent\n \nnamespace\n \nto\n \ninterface\n \nto\n\n\n    \nNginx\\Manager\n,\n\n\n\n    \n//\n \nkeys\n\n\n    \n$\nconfig\n[\nplinker\n][\npublic_key\n]\n,\n\n\n    \n$\nconfig\n[\nplinker\n][\nprivate_key\n]\n,\n\n\n\n    \n//\n \nconstruct\n \nvalues\n \nwhich\n \nyou\n \npass\n \nto\n \nthe\n \ncomponent\n,\n \nwhich\n \nthe\n \ncomponent\n\n\n    \n//\n  \nwill\n \nuse\n,\n \nfor\n \nRedbeanPHP\n \ncomponent\n \nyou\n \nwould\n \nsend\n \nthe\n \ndatabase\n \nconnection\n\n\n    \n//\n  \ndont\n \nworry\n \nits\n \nAES\n \nencrypted\n.\n \nsee\n:\n \nencryption\n-\nproof\n.\ntxt\n\n\n    \n$\nconfig\n\n\n)\n;\n\n\n\n\n\n\n::Calls::\n\n\nSetup\n\n\nApplies build tasks to plinker/tasks queue.\n\n\n$nginx-\nsetup([\n    \nbuild_sleep\n =\n 1    \n])\n\n\n\n\n\nCreate\n\n\n$route = [\n    \nlabel\n =\n \nExample\n,\n    \nownDomain\n =\n [\n        [\nname\n =\n \nexample.com\n],\n        [\nname\n =\n \nwww.example.com\n]\n    ],\n    \nownUpstream\n =\n [\n        [\nip\n =\n \n127.0.0.1\n, \nport\n =\n \n80\n]\n    ],\n    \nletsencrypt\n =\n 0,\n    \nenabled\n =\n 1\n];\n$nginx-\nadd($route);\n\n\n\n\n\nUpdate\n\n\n$route = [\n    \nlabel\n =\n \nExample Changed\n,\n    \nownDomain\n =\n [\n        [\nname\n =\n \nexample.com\n],\n        [\nname\n =\n \nwww.example.com\n],\n        [\nname\n =\n \nnew.example.com\n]\n    ],\n    \nownUpstream\n =\n [\n        [\nip\n =\n 10.0.0.1\n, \nport\n =\n \n8080\n]\n    ],\n    \nletsencrypt\n =\n 0,\n    \nenabled\n =\n 1\n];\n// column, value, $data\n$nginx-\nupdate(\nid = ?\n, [1], $data);\n\n\n\n\n\nFetch\n\n\n$nginx-\nfetch(\nroute\n);\n$nginx-\nfetch(\nroute\n, \nid = ?\n, [1]);\n$nginx-\nfetch(\nroute\n, \nname = ?\n, [\nsome-guidV4-value\n])\n\n\n\n\n\nRemove\n\n\n$nginx-\nremove(\nname = ?\n, [$route[\nname\n]]);\n\n\n\n\n\nRebuild\n\n\n$nginx-\nrebuild(\nname = ?\n, [$route[\nname\n]]);\n\n\n\n\n\nReset\n\n\n// dont remove tasks\n$nginx-\nreset();\n\n// remove tasks\n$nginx-\nreset(true);\n\n\n\n\n\nSee the \norganisations page\n for additional \ncomponents and examples.", 
            "title": "Home"
        }, 
        {
            "location": "/#installing", 
            "text": "Bring in the project with composer:  {\n     require : {\n         plinker/nginx :  =v0.1 \n    }\n}  Then navigate to  ./vendor/plinker/nginx/scripts  and run  bash install.sh  The webroot for plinker will be  /var/www/html  so plinker should be in there.\nThe difference being that nginx will listen on port 88 for plinker calls, \nand 80, 443 for the reverse proxy.", 
            "title": "::Installing::"
        }, 
        {
            "location": "/#client", 
            "text": "/**   * Plinker Config   */  $ config   =   [       //   plinker   connection       plinker   =   [           endpoint   =   http://127.0.0.1:88 ,           public_key    =   makeSomethingUp ,           private_key   =   againMakeSomethingUp       ] ,       //   database   connection       database   =   [           dsn        =   sqlite:./.plinker/database.db ,           host       =   ,           name       =   ,           username   =   ,           password   =   ,           freeze     =   false ,           debug      =   false ,       ]  ];  //   init   plinker   endpoint   client  $ nginx   =   new   \\ Plinker \\ Core \\ Client (       //   where   is   the   plinker   server       $ config [ plinker ][ endpoint ] ,       //   component   namespace   to   interface   to       Nginx\\Manager ,       //   keys       $ config [ plinker ][ public_key ] ,       $ config [ plinker ][ private_key ] ,       //   construct   values   which   you   pass   to   the   component ,   which   the   component       //    will   use ,   for   RedbeanPHP   component   you   would   send   the   database   connection       //    dont   worry   its   AES   encrypted .   see :   encryption - proof . txt       $ config  ) ;", 
            "title": "::Client::"
        }, 
        {
            "location": "/#calls", 
            "text": "Setup  Applies build tasks to plinker/tasks queue.  $nginx- setup([\n     build_sleep  =  1    \n])  Create  $route = [\n     label  =   Example ,\n     ownDomain  =  [\n        [ name  =   example.com ],\n        [ name  =   www.example.com ]\n    ],\n     ownUpstream  =  [\n        [ ip  =   127.0.0.1 ,  port  =   80 ]\n    ],\n     letsencrypt  =  0,\n     enabled  =  1\n];\n$nginx- add($route);  Update  $route = [\n     label  =   Example Changed ,\n     ownDomain  =  [\n        [ name  =   example.com ],\n        [ name  =   www.example.com ],\n        [ name  =   new.example.com ]\n    ],\n     ownUpstream  =  [\n        [ ip  =  10.0.0.1 ,  port  =   8080 ]\n    ],\n     letsencrypt  =  0,\n     enabled  =  1\n];\n// column, value, $data\n$nginx- update( id = ? , [1], $data);  Fetch  $nginx- fetch( route );\n$nginx- fetch( route ,  id = ? , [1]);\n$nginx- fetch( route ,  name = ? , [ some-guidV4-value ])  Remove  $nginx- remove( name = ? , [$route[ name ]]);  Rebuild  $nginx- rebuild( name = ? , [$route[ name ]]);  Reset  // dont remove tasks\n$nginx- reset();\n\n// remove tasks\n$nginx- reset(true);  See the  organisations page  for additional \ncomponents and examples.", 
            "title": "::Calls::"
        }
    ]
}